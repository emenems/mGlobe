function mGlobe_calc_Hydro(Input,output_file,output_file_type,DEM_file,...
                            start_calc,end_calc,step_calc,exclude_calc,...
                            model_calc,model_layer,mass_conserv,ghc_treshold,...
                            ghc_path,subtract_average,INCLUDE_file,varargin)
%MGLOBE_CALC_HYDRO Main function for the estimation of global hydro. effect
% Function uses inputs generated by the main (GUI) mGlobe function and
% calculates the global hydrological effect in nm/s^2.
% 
% INPUT:
%   Input             ... Point of observation 
%                         [Latitude (deg), Longitude (deg), Height(deg)]
%						  Example: [48.24885,16.35650,192.70]
%   output_file       ... full output file name
%						  Example: 'HYDRO_NOAH025_Effect.txt'
%   output_file_type  ... File type switch: [xls, txt, tsf]
%						  Example: [0 1 0]
%   DEM_file          ... DEM grid in *.mat format
%                         (dem.lat (deg),dem.lon (deg),dem.height (m))
%						  Example: 'Vienna_DEM_up_to_0p12degrees.mat'
%   start_calc        ... starting time in matlab format (days)
%						  Example: datenum(2000,1,1,12,0,0)
%   end_calc          ... end time in matlab format (days)
%						  Example: datenum(2000,12,1,12,0,0)
%   step_calc         ... time resolution switcher (not in time units)
%						  1 = 3 hours, 2 = 6 hours, 3 = 12 hours, 
%						  4 = one day, 5 = two days, 6 = month
%						  Example: 4
%   exclude_calc      ... excluding area option [1 1] = Greenland and
%                         Antarctica, 1 = removed, 0 not removed
%						  Example: [1 1]
%   model_calc        ... Model intern identification/switch 
%						  1 = GLDAS/CLM, 2 = GLDAS/MOS, 
%					      3 = GLDAS/NOAH025, 4 = GLDAS/NOAH10,
%					      5 = GLDAS/VIC, 6 = ERA, 7 = MERRA,
%					      8 = OTHER, 9 = GRACE, 10 = NCEP Reanalysis 2, 
%                         11 = MERRA, 12 = NCEP Reanalysis 1 (beta),
%                         13 = GLDASv2.1/NOAH025,
%                         14 = ERA5
%						  Example: 3
%   model_layer       ... Model layer (depends on model_calc). For all
%						  models, 1 = total water storage
%						  Example: 1
%   mass_conserv      ... mass conservation switch
%						  1 = no effect over ocean 
%						  2 = ocean layer computed from water deficit/excess
%						  3 = coupled model (gives also water storage over oceans)
%						  Example: 2
%   ghc_treshold      ... minimal spherical distance of hydro.masses to 
%                         point of observation in degrees
%						  Example: 0.1
%   ghc_path          ... path used for loading of model data
%						  Example: fullfile('GHM','NOAH025')
%                         Example for Other models: 'GHM\OTHER\OTHERmodel';
%                         Example for GRACE: 'GRACE\LAND\GRC_GFZ_RL05_CONv1409s';
%   subtract_average  ... subtract average from all output variables
%                         (0,1 = no, yes)
%						  Example: 0
%   INCLUDE_file      ... full file name with inclusion polygon (will set 
%                         all values outside this polygon to zero). No 
%                         header lines are allowed. Supported format: *.txt
%                         Lon1 Lat1 (in degrees, -90:90, -180:180 system)
%                         Lon2 Lat2
%                         ...
%						  Example: 'Inclusion_polygon_Lon_Lat_degrees.txt'
%   varargin{1}       ... shape-file of local coastline
%                         Example: 'ne_110m_land.shp'
% 
% 
% OUTPUT (saved automatically): 
%   date in matlab format, date civil, total effect, loading part of the
%   effect, newtonian part of the effect, ocean/continent part
% 
%                                         M.Mikolaj, mikolaj@gfz-potsdam.de

tic % measure the total time of computation

%% Set calculation properties
% Zone 1
% resolution used in zone 1 (degrees), i.e. for point with spherical 
% distance > treshold_zone1
delta_zone1 = 0.15;                                             
treshold_zone1 = 14; % degrees, threshold = spherical rectangle (for zone 1 to 4, zone 5 = spherical circle)
% Zone 3 (+2)
delta_zone3 = 0.04;
treshold_zone3 = 1.05;
% Zone 4 & 5: increase the resolution in case of detailed (SHP) coastline
% file is selected
if nargin >= 16 && ischar(varargin{1})
    delta_zone4 = 0.004;
    delta_zone5 = 0.0004;
else
    delta_zone4 = 0.008;
    delta_zone5 = 0.0008;
end
treshold_zone4out = 5; 
% Folowing value must be more than the treshold_zone4 to the diff. between 
% rectangle and circle border
if ghc_treshold>=0.1
    treshold_zone4in = ghc_treshold;
    % if threshold>0.1 -> zone 5 will not be used
    treshold_zone5in = NaN; 
    treshold_zone5out = NaN;
else
    % if threshold<=0.1 -> zone 5 will be calculated up to given threshold (min 0.05 deg)
    treshold_zone4in = 0.1; 
    treshold_zone5out = 0.1;
    treshold_zone5in = ghc_treshold;
end

%% Constant declaration
ver = version; % matlab or octave
a = 6378137;                                                                % ellipsoidal major axis (m)
b = 6356752.314245;
e = sqrt((a^2-b^2)/a^2);
r = sqrt(1+2/3*e^2+3/5*e^4+4/7*e^6+5/9*e^8+6/11*e^10+7/13*e^12)*b;          % Radius of the replacement sphere -> equal surface
% load ocean/continent grid to compute the total ocean area
oceans = importdata('mGlobe_DATA_OceanGrid.mat');   
delta_oce = [abs(oceans.lon(1)-oceans.lon(2)) abs(oceans.lat(1)-oceans.lat(2))];
[oceans.lon,oceans.lat] = meshgrid(oceans.lon,oceans.lat);
delta_lat = diff(vertcat(oceans.lat(1,:)-delta_oce(2),oceans.lat));
delta_lon = diff(horzcat(oceans.lon(:,1)-delta_oce(1),oceans.lon)');delta_lon = delta_lon';
if strcmp(ver(end),')')
    area = areaquad(oceans.lat-delta_lat/2,oceans.lon-delta_lon/2,oceans.lat+delta_lat/2,oceans.lon+delta_lon/2,referenceEllipsoid('wgs84','m')); % area of the loaded grid (oceans + continents)
else
    fiG = mGlobe_elip2sphere(oceans.lon*pi/180,oceans.lat*pi/180);        % transform given (ellipsoidal) coord. to spherical
    delta_ghm_Sphere = abs(fiG+(delta_lat/2)*pi/180 - mGlobe_elip2sphere(oceans.lon*pi/180,(oceans.lat-delta_lat/2)*pi/180)); % calc. new grid resolution
    area = 2*r^2*(delta_oce(1)*pi/180).*cos(fiG).*sin(delta_ghm_Sphere./2);
    clear delta_ghm_Sphere fiG  % remove used variable
end
ocean_surface_total = sum(sum(area(oceans.id==1))); % total ocean area
clear oceans delta_lat delta_lon area % remove used variable
% Loading the table with deformation effect/correction w.r.to spherical 
% distance (default mGlobe distribution: Pagiatakis,(1988))
dgE_table = load('mGlobe_DATA_dgE_Hydro.txt');
dgE_table(:,1) = dgE_table(:,1)*pi/180; % transform deg to radians

%% DEM Manipulation
% load DEM if given
if ~isempty(DEM_file)                                                       
    DEM = importdata(DEM_file);
else
    DEM = [];
end
% Use input height (not interpolated!)
hd = Input(3);

%% Time of observation
[year_s,month_s] = datevec(start_calc);                                     % transform matlab time to civil date
[year_e,month_e] = datevec(end_calc);
if step_calc == 6                                                           % create time for MONTHly data
    j = 1;
    for year = year_s:year_e
        if j == 1
            mz = month_s;
        else
            mz = 1;
        end
        if year == year_e
            mk = month_e;
        else
            mk = 12;
        end
        for m = mz:mk
            time(j,1) = year;
            time(j,2) = m;
            j = j + 1;
        end
    end
    time(:,3) = 1;
    time(:,7) = datenum(time(:,1),time(:,2),time(:,3));
else                                                                        % create time for other resolutions
    switch step_calc
        case 1
            time_resol_in_days = 3/24;
        case 2
            time_resol_in_days = 6/24;
        case 3 
            time_resol_in_days = 12/24;
        case 4
            time_resol_in_days = 1;
        case 5
            time_resol_in_days = 2;
    end
    days = start_calc:time_resol_in_days:end_calc;
    time = datevec(days);
    time(:,7) = days;
    clear days
end

if model_calc == 9                                                          % special time treatment for GRACE data (=unequally spaced)
    clear time
    try
    curfolder = pwd;
    cd(fileparts(ghc_path));
    file_count = dir([ghc_path(end-21:end),'*.mat']);                       % find files in GRACE folder with given PREFIX in mat format
    cd(curfolder);
    if isempty(file_count)
        time(1,:) = [9999,9999,9999,9999,9999,9999,9999];
    else
        time(1:7,1:length(file_count)) = 0;
        for igrace = 1:length(file_count)
            time(igrace,1) = str2double(file_count(igrace).name(24:27));
            time(igrace,2) = str2double(file_count(igrace).name(28:29));
            time(igrace,3) = str2double(file_count(igrace).name(30:31));
            time(igrace,4) = str2double(file_count(igrace).name(33:34));
        end
        time(:,7) = datenum(time(:,1),time(:,2),time(:,3),time(:,4),0,0);   % transform to matlab time
        time(time(:,7)>end_calc,:) = [];                                    % use only data specified by user (time)
        time(time(:,7)<start_calc,:) = [];
        clear file_count igrace
        [~,sort_id] = sort(time(:,7),1); % find sorted time (ascending)
        time = time(sort_id,:);                                             % apply soring to whole time matrix 
    end
    catch                                                                   % warn user that the GRACE files could not be find
        set(findobj('Tag','text_status'),'String','Make sure that the GRACE folder does exist and contains desired files');drawnow 
        fprintf('Make sure that the GRACE folder does exist and contains desired files (prefix: %s)\n',ghc_path(end-21:end));
        pause(5);
        clear time
        time(1,1:7) = [9999,9999,9999,9999,9999,9999,9999];
    end
end
%% Predefine variables
% Declare variables for faster computation
dgE(1:size(time,1),1:5) = 0;                                                
dgP(1:size(time,1),1:5) = 0;
conserv_corrE(1:size(time,1),1:5) = 0;
conserv_corrP(1:size(time,1),1:5) = 0;
GHM_conserv(1:size(time,1),1) = 0;
row_id_nan(1:size(time,1),1) = 0;
interp_output(1:size(time,1),1) = 0;
% load inclusion polygon (to remove grid cells outside of this polygon)
if ~isempty(INCLUDE_file)                                                   
    try 
        inclusion = load(INCLUDE_file);
    catch
        inclusion = [];
        fprintf('Hydro: could not load inclusion polygon file\n');           % warn user that the file was not loaded
    end
else
    inclusion = [];
end
%% CALCULATION
set(findobj('Tag','text_status'),'String','Hydro: Calculating hydrological effect ...     '); drawnow % write status message to GUI
for i = 1:size(time,1)
    check_out = 0;
    %% HYDRO MODEL loading
    switch model_calc                                                       % switch between models
        case 1                                                              % CLM
            model_name = 'GLDAS/CLM';                                       % prepare reference variable for mass conservation enforcement:
            if exclude_calc(1) == 0 && exclude_calc(2) == 0                 % nothing is excluded
                ref_mass_conserv = 8.80051891e+16;
            elseif exclude_calc(2) == 0 && exclude_calc(1) == 1             % only Greenland excluded
                ref_mass_conserv = 8.49902593e+16;
            elseif exclude_calc(2) == 1 && exclude_calc(1) == 1             % Greenland and Antarctica excluded
                ref_mass_conserv = 8.49902593e+16;
            elseif exclude_calc(2) == 1 && exclude_calc(1) == 0             % only Antarctica excluded
                ref_mass_conserv = 8.80051891e+16;
            end
            if step_calc == 6   
                nazov = fullfile(ghc_path,sprintf('GLDAS_CLM10_M_%4d%02d.mat',time(i,1),time(i,2))); % create file name for MONTHly data
            else
                nazov = fullfile(ghc_path,sprintf('GLDAS_CLM10SUBP_3H_%4d%02d%02d_%02d.mat',time(i,1),time(i,2),time(i,3),time(i,4))); % Daily data
            end
            try
                new = importdata(nazov);                                    % load model values
                switch model_layer
                    case 1
                        new.celkovo = new.soilm1 + new.soilm2 + new.soilm3 + new.soilm4 +... % create matrix with total water storage
                                  new.soilm5 + new.soilm6 + new.soilm7 + new.soilm8 +...
                                  new.soilm9 + new.soilm10 + new.swe;
                       out_layer = 'total';                                 % Used for output only
                    case 2
                        new.celkovo = new.soilm1;out_layer = 'soilm1';
                    case 3
                        new.celkovo = new.soilm2;out_layer = 'soilm2';
                    case 4
                        new.celkovo = new.soilm3;out_layer = 'soilm3';
                    case 5
                        new.celkovo = new.soilm4;out_layer = 'soilm4';
                    case 6
                        new.celkovo = new.soilm5;out_layer = 'soilm5';
                    case 7
                        new.celkovo = new.soilm6;out_layer = 'soilm6';
                    case 8
                        new.celkovo = new.soilm7;out_layer = 'soilm7';
                    case 9
                        new.celkovo = new.soilm8;out_layer = 'soilm8';
                    case 10
                        new.celkovo = new.soilm9;out_layer = 'soilm9';
                    case 11
                        new.celkovo = new.soilm10;out_layer = 'soilm10';
                    case 12
                        new.celkovo = new.swe;out_layer = 'swe';
                end
            catch exeption
                out_message = sprintf('Hydro: file %s not found',nazov);    % warn user if the model values were not loaded
                set(findobj('Tag','text_status'),'String',out_message); drawnow
                check_out = 1;
            end
        case 2                                                              % MOSAIC
            model_name = 'GLDAS/MOS';
            if exclude_calc(1) == 0 && exclude_calc(2) == 0                 % nothing is excluded
                ref_mass_conserv = 1.03934043e+17;
            elseif exclude_calc(2) == 0 && exclude_calc(1) == 1             % only Greenland excluded
                ref_mass_conserv = 9.00087480e+16;
            elseif exclude_calc(2) == 1 && exclude_calc(1) == 1             % Greenland and Antarctica excluded
                ref_mass_conserv = 9.00087480e+16;
            elseif exclude_calc(2) == 1 && exclude_calc(1) == 0             % only Antarctica excluded
                ref_mass_conserv = 1.03934043e+17;
            end
            if step_calc == 6
                nazov = fullfile(ghc_path,sprintf('GLDAS_MOS10_M_%4d%02d.mat',time(i,1),time(i,2))); 
            else
                nazov = fullfile(ghc_path,sprintf('GLDAS_MOS10SUBP_3H_%4d%02d%02d_%02d.mat',time(i,1),time(i,2),time(i,3),time(i,4)));
            end
            try
                new = importdata(nazov);
                switch model_layer
                    case 1
                        new.celkovo = new.soilm1 + new.soilm2 + new.soilm3 + new.swe;
                        out_layer = 'total';
                    case 2
                        new.celkovo = new.soilm1;out_layer = 'soilm1';
                    case 3
                        new.celkovo = new.soilm2;out_layer = 'soilm2';
                    case 4
                        new.celkovo = new.soilm3;out_layer = 'soilm3';
                    case 5
                        new.celkovo = new.swe;out_layer = 'swe';
                end
            catch exeption
                out_message = sprintf('Hydro: file %s not found',nazov);
                set(findobj('Tag','text_status'),'String',out_message); drawnow
                check_out = 1;
            end
        case 3                                                              % NOAH025
            model_name = 'GLDAS/NOAH025';
            if exclude_calc(1) == 0 && exclude_calc(2) == 0                 % nothing is excluded
                ref_mass_conserv = 7.30141280e+16;
            elseif exclude_calc(2) == 0 && exclude_calc(1) == 1             % only Greenland excluded
                ref_mass_conserv = 5.96985431e+16;
            elseif exclude_calc(2) == 1 && exclude_calc(1) == 1             % Greenland and Antarctica excluded
                ref_mass_conserv = 5.96985431e+16;
            elseif exclude_calc(2) == 1 && exclude_calc(1) == 0             % only Antarctica excluded
                ref_mass_conserv = 7.30141280e+16;
            end
            if step_calc == 6
                nazov = fullfile(ghc_path,sprintf('GLDAS_NOAH025_M_%4d%02d.mat',time(i,1),time(i,2)));
            else
                nazov = fullfile(ghc_path,sprintf('GLDAS_NOAH025SUBP_3H_%4d%02d%02d_%02d.mat',time(i,1),time(i,2),time(i,3),time(i,4)));
            end
            try
                new = importdata(nazov);
                switch model_layer
                    case 1
                        new.celkovo = new.soilm1 + new.soilm2 + new.soilm3 + new.soilm4 + new.swe;
                        out_layer = 'total';
                    case 2
                        new.celkovo = new.soilm1;out_layer = 'soilm1';
                    case 3
                        new.celkovo = new.soilm2;out_layer = 'soilm2';
                    case 4
                        new.celkovo = new.soilm3;out_layer = 'soilm3';
                    case 5
                        new.celkovo = new.soilm4;out_layer = 'soilm4';
                    case 6
                        new.celkovo = new.swe;out_layer = 'swe';
                end
            catch exeption
                out_message = sprintf('Hydro: file %s not found',nazov);
                set(findobj('Tag','text_status'),'String',out_message); drawnow
                check_out = 1;
            end
        case 4                                                              % NOAH10
            model_name = 'GLDAS/NOAH10';
            if exclude_calc(1) == 0 && exclude_calc(2) == 0                 % nothing is excluded
                ref_mass_conserv = 7.13150298e+16;
            elseif exclude_calc(2) == 0 && exclude_calc(1) == 1             % only Greenland excluded
                ref_mass_conserv = 5.83757271e+16;
            elseif exclude_calc(2) == 1 && exclude_calc(1) == 1             % Greenland and Antarctica excluded
                ref_mass_conserv = 5.83757271e+16;
            elseif exclude_calc(2) == 1 && exclude_calc(1) == 0             % only Antarctica excluded
                ref_mass_conserv = 7.13150298e+16;
            end
            if step_calc == 6
                nazov = fullfile(ghc_path,sprintf('GLDAS_NOAH10_M_%4d%02d.mat',time(i,1),time(i,2))); 
            else
                nazov = fullfile(ghc_path,sprintf('GLDAS_NOAH10SUBP_3H_%4d%02d%02d_%02d.mat',time(i,1),time(i,2),time(i,3),time(i,4)));
            end
            try
                new = importdata(nazov);
                switch model_layer
                    case 1
                        new.celkovo = new.soilm1 + new.soilm2 + new.soilm3 + new.soilm4 + new.swe;
                        out_layer = 'total';
                    case 2
                        new.celkovo = new.soilm1;out_layer = 'soilm1';
                    case 3
                        new.celkovo = new.soilm2;out_layer = 'soilm2';
                    case 4
                        new.celkovo = new.soilm3;out_layer = 'soilm3';
                    case 5
                        new.celkovo = new.soilm4;out_layer = 'soilm4';
                    case 6
                        new.celkovo = new.swe;out_layer = 'swe';
                end
            catch exeption
                out_message = sprintf('Hydro: file %s not found',nazov);
                set(findobj('Tag','text_status'),'String',out_message); drawnow
                check_out = 1;
            end
        case 5                                                              % VIC
            model_name = 'GLDAS/VIC';
            if exclude_calc(1) == 0 && exclude_calc(2) == 0                 % nothing is excluded
                ref_mass_conserv = 8.581915451e+16;
            elseif exclude_calc(2) == 0 && exclude_calc(1) == 1             % only Greenland excluded
                ref_mass_conserv = 6.900214454e+16;
            elseif exclude_calc(2) == 1 && exclude_calc(1) == 1             % Greenland and Antarctica excluded
                ref_mass_conserv = 6.900214454e+16;
            elseif exclude_calc(2) == 1 && exclude_calc(1) == 0             % only Antarctica excluded
                ref_mass_conserv = 8.581915451e+16;
            end
            if step_calc == 6
                nazov = fullfile(ghc_path,sprintf('GLDAS_VIC10_M_%4d%02d.mat',time(i,1),time(i,2))); 
            else
                nazov = fullfile(ghc_path,sprintf('GLDAS_VIC10_3H_%4d%02d%02d_%02d.mat',time(i,1),time(i,2),time(i,3),time(i,4)));
            end
            try
                new = importdata(nazov);
                switch model_layer
                    case 1
                        new.celkovo = new.soilm1 + new.soilm2 + new.soilm3 + new.swe;
                        out_layer = 'total';
                    case 2
                        new.celkovo = new.soilm1;out_layer = 'soilm1';
                    case 3
                        new.celkovo = new.soilm2;out_layer = 'soilm2';
                    case 4
                        new.celkovo = new.soilm3;out_layer = 'soilm3';
                    case 5
                        new.celkovo = new.swe;out_layer = 'swe';
                end
            catch exeption
                out_message = sprintf('Hydro: file %s not found',nazov);
                set(findobj('Tag','text_status'),'String',out_message); drawnow
                check_out = 1;
            end
        case 6                                                              % ERA Interim surface level model
            model_name = 'ERA Interim';
            if exclude_calc(1) == 0 && exclude_calc(2) == 0                 % nothing is excluded
                ref_mass_conserv = 2.57478016e+17;
            elseif exclude_calc(2) == 0 && exclude_calc(1) == 1             % only Greenland excluded
                ref_mass_conserv = 2.36391339e+17;
            elseif exclude_calc(2) == 1 && exclude_calc(1) == 1             % Greenland and Antarctica excluded
                ref_mass_conserv = 1.04401050e+17;
            elseif exclude_calc(2) == 1 && exclude_calc(1) == 0             % only Antarctica excluded
                ref_mass_conserv = 1.25487727e+17;
            end
            if step_calc == 6
                nazov = fullfile(ghc_path,sprintf('ERA_INTERIM_M_%4d%02d.mat',time(i,1),time(i,2))); 
            else
                nazov = fullfile(ghc_path,sprintf('ERA_INTERIM_6H_%4d%02d%02d_%02d.mat',time(i,1),time(i,2),time(i,3),time(i,4)));
            end
            try
                new = importdata(nazov);
                switch model_layer
                    case 1
                        new.celkovo = (new.swvl1*0.07 + new.swvl2*0.21 + new.swvl3*0.72 + new.swvl4*1.89)*1000 + new.sd*1000; % transform from m3/m3 and m of water to kg/m^2 (mm)
                        out_layer = 'total';
                    case 2
                        new.celkovo = (new.swvl1*0.07)*1000;out_layer = 'swvl1';
                    case 3
                        new.celkovo = (new.swvl2*0.21)*1000;out_layer = 'swvl2';
                    case 4
                        new.celkovo = (new.swvl3*0.72)*1000;out_layer = 'swvl3';
                    case 5
                        new.celkovo = (new.swvl4*1.89)*1000;out_layer = 'swvl4';
                    case 6
                        new.celkovo = new.sd*1000;out_layer = 'sd';
                end
                new.lon(new.lon>=180) = new.lon(new.lon>=180) - 360;        % transform coordinates/longitude to (-180,180) system  
                ri = find(abs(diff(new.lon(1,:)))==max(abs(diff(new.lon(1,:)))));
                new.lon = horzcat(new.lon(:,ri+1:end),new.lon(:,1:ri));     % Connect matrices to remove discontinuity
            	new.lat = horzcat(new.lat(:,ri+1:end),new.lat(:,1:ri));
                new.celkovo = horzcat(new.celkovo(:,ri+1:end),new.celkovo(:,1:ri));clear ri;
            catch exeption
                out_message = sprintf('Hydro: file %s not found',nazov);
                set(findobj('Tag','text_status'),'String',out_message); drawnow
                check_out = 1;
            end
        case 7                                                              % MERRA
            model_name = 'MERRA';
            if exclude_calc(1) == 0 && exclude_calc(2) == 0                 % nothing is excluded
                ref_mass_conserv = 2.58129223e+16;
            elseif exclude_calc(2) == 0 && exclude_calc(1) == 1             % only Greenland excluded
                ref_mass_conserv = 2.56792219e+16;
            elseif exclude_calc(2) == 1 && exclude_calc(1) == 1             % Greenland and Antarctica excluded
                ref_mass_conserv = 2.56792219e+16;
            elseif exclude_calc(2) == 1 && exclude_calc(1) == 0             % only Antarctica excluded
                ref_mass_conserv = 2.58129223e+16;
            end
            if step_calc == 6
                nazov = fullfile(ghc_path,sprintf('MERRA_M_%4d%02d.mat',time(i,1),time(i,2))); 
            else
                nazov = fullfile(ghc_path,sprintf('MERRA_1H_%4d%02d%02d_%02d.mat',time(i,1),time(i,2),time(i,3),time(i,4)));
            end
            try
                new = importdata(nazov);
                new.celkovo = new.twland;                                   % sum all layers (TWS). No model_layer switch required = only one layer available
                out_layer = 'total (twland)';
            catch exeption
                out_message = sprintf('Hydro: file %s not found',nazov);
                set(findobj('Tag','text_status'),'String',out_message); drawnow
                check_out = 1;
            end
        case 8                                                              % OTHER (e.g. WHGM) 
            model_name = ghc_path(end-9:end);                               % first value will be used as reference for the mass conservation enforcement
            if step_calc == 6
                nazov = fullfile([ghc_path,sprintf('_M_%4d%02d.mat',time(i,1),time(i,2))]); 
            else
                nazov = fullfile([ghc_path,sprintf('_D_%04d%02d%02d_%02d.mat',time(i,1),time(i,2),time(i,3),time(i,4))]);
            end
            try
                new = importdata(nazov);
                new.celkovo = new.total;                                    % sum all layers (TWS). No model_layer switch required = only one layer available
                out_layer = 'total';
            catch exeption
                out_message = sprintf('Hydro: file %s not found',nazov);
                set(findobj('Tag','text_status'),'String',out_message); drawnow
                check_out = 1;
            end
        case 9                                                              % GRACE
            model_name = ghc_path(end-21:end);                              % first value will be used as reference for the mass conservation enforcement
            nazov = fullfile([ghc_path,sprintf('_%04d%02d%02d_%02d.mat',time(i,1),time(i,2),time(i,3),time(i,4))]);
            try
                new = importdata(nazov);
                new.celkovo = new.total*10;                                 % sum all layers (TWS). No model_layer switch required = only one layer available
                out_layer = 'total';
                new.celkovo(isnan(new.celkovo)) = 0;
            catch exeption
                out_message = sprintf('Hydro: file %s not found',nazov);
                set(findobj('Tag','text_status'),'String',out_message); drawnow
                check_out = 1;
            end
        case 10                                                             % NCEP Reanalysis-2 surface level model
            model_name = 'NCEP Reanalysis-2 (surface)';
            if exclude_calc(1) == 0 && exclude_calc(2) == 0                 % nothing is excluded
                ref_mass_conserv = 7.72203156e+17;
            elseif exclude_calc(2) == 0 && exclude_calc(1) == 1             % only Greenland excluded
                ref_mass_conserv = 6.80883335e+17;
            elseif exclude_calc(2) == 1 && exclude_calc(1) == 1             % Greenland and Antarctica excluded
                ref_mass_conserv = 6.40132816e+16;
            elseif exclude_calc(2) == 1 && exclude_calc(1) == 0             % only Antarctica excluded
                ref_mass_conserv = 1.55333103e+17;
            end
            if step_calc == 6
                nazov = fullfile(ghc_path,sprintf('NCEP_REAN2_M_%4d%02d.mat',time(i,1),time(i,2))); 
            else
                nazov = fullfile(ghc_path,sprintf('NCEP_REAN2_6H_%4d%02d%02d_%02d.mat',time(i,1),time(i,2),time(i,3),time(i,4)));
            end
            try
                new = importdata(nazov);
                switch model_layer
                    case 1
                        new.celkovo = (new.soilw1*0.10 + new.soilw2*1.90)*1000 + new.weasd; % transform from m3/m3 and mm of water to kg/m^2 (mm)
                        out_layer = 'total';
                    case 2
                        new.celkovo = (new.soilw1*0.10)*1000;out_layer = 'soilw1';
                    case 3
                        new.celkovo = (new.soilw2*1.90)*1000;out_layer = 'soilw2';
                    case 4
                        new.celkovo = new.weasd;out_layer = 'weasd';
                end
                new.lon(new.lon>=180) = new.lon(new.lon>=180) - 360;        % transform coordinates/longitude to (-180,180) system  
                ri = find(abs(diff(new.lon(1,:)))==max(abs(diff(new.lon(1,:)))));
                new.lon = horzcat(new.lon(:,ri+1:end),new.lon(:,1:ri));     % Connect matrices to remove discontinuity
            	new.lat = horzcat(new.lat(:,ri+1:end),new.lat(:,1:ri));
                new.celkovo = horzcat(new.celkovo(:,ri+1:end),new.celkovo(:,1:ri));clear ri;
            catch exeption
                out_message = sprintf('Hydro: file %s not found',nazov);
                set(findobj('Tag','text_status'),'String',out_message); drawnow
                check_out = 1;
            end
        case 11                                                              % MERRA2
            model_name = 'MERRA2';
            if exclude_calc(1) == 0 && exclude_calc(2) == 0                 % nothing is excluded
                ref_mass_conserv = 7.06837661278356e+16;
            elseif exclude_calc(2) == 0 && exclude_calc(1) == 1             % only Greenland excluded
                ref_mass_conserv = 7.03007526693119e+16;
            elseif exclude_calc(2) == 1 && exclude_calc(1) == 1             % Greenland and Antarctica excluded
                ref_mass_conserv = 7.03007526693119e+16;
            elseif exclude_calc(2) == 1 && exclude_calc(1) == 0             % only Antarctica excluded
                ref_mass_conserv = 7.06837661278356e+16;
            end
            if step_calc == 6
                nazov = fullfile(ghc_path,sprintf('MERRA2_M_%4d%02d.mat',time(i,1),time(i,2))); 
            else
                nazov = fullfile(ghc_path,sprintf('MERRA2_1H_%4d%02d%02d_%02d.mat',time(i,1),time(i,2),time(i,3),time(i,4)));
            end
            try
                new = importdata(nazov);
                new.celkovo = new.twland;                                   % sum all layers (TWS). No model_layer switch required = only one layer available
                out_layer = 'total (twland)';
            catch exeption
                out_message = sprintf('Hydro: file %s not found',nazov);
                set(findobj('Tag','text_status'),'String',out_message); drawnow
                check_out = 1;
            end
        case 12                                                             % NCEP Reanalysis-1 surface level model
            model_name = 'NCEP Reanalysis-1 (surface)';
            if exclude_calc(1) == 0 && exclude_calc(2) == 0                 % nothing is excluded
                ref_mass_conserv = 7.72203156e+17;
            elseif exclude_calc(2) == 0 && exclude_calc(1) == 1             % only Greenland excluded
                ref_mass_conserv = 6.80883335e+17;
            elseif exclude_calc(2) == 1 && exclude_calc(1) == 1             % Greenland and Antarctica excluded
                ref_mass_conserv = 6.40132816e+16;
            elseif exclude_calc(2) == 1 && exclude_calc(1) == 0             % only Antarctica excluded
                ref_mass_conserv = 1.55333103e+17;
            end
            if step_calc == 6
                nazov = fullfile(ghc_path,sprintf('NCEP_REAN1_M_%4d%02d.mat',time(i,1),time(i,2))); 
            else
                nazov = fullfile(ghc_path,sprintf('NCEP_REAN1_6H_%4d%02d%02d_%02d.mat',time(i,1),time(i,2),time(i,3),time(i,4)));
            end
            try
                new = importdata(nazov);
                switch model_layer
                    case 1
                        new.celkovo = (new.soilw1*0.10 + new.soilw2*1.90)*1000 + new.weasd; % transform from m3/m3 and mm of water to kg/m^2 (mm)
                        out_layer = 'total';
                    case 2
                        new.celkovo = (new.soilw1*0.10)*1000;out_layer = 'soilw1';
                    case 3
                        new.celkovo = (new.soilw2*1.90)*1000;out_layer = 'soilw2';
                    case 4
                        new.celkovo = new.weasd;out_layer = 'weasd';
                end
                new.lon(new.lon>=180) = new.lon(new.lon>=180) - 360;        % transform coordinates/longitude to (-180,180) system  
                ri = find(abs(diff(new.lon(1,:)))==max(abs(diff(new.lon(1,:)))));
                new.lon = horzcat(new.lon(:,ri+1:end),new.lon(:,1:ri));     % Connect matrices to remove discontinuity
            	new.lat = horzcat(new.lat(:,ri+1:end),new.lat(:,1:ri));
                new.celkovo = horzcat(new.celkovo(:,ri+1:end),new.celkovo(:,1:ri));clear ri;
            catch exeption
                out_message = sprintf('Hydro: file %s not found',nazov);
                set(findobj('Tag','text_status'),'String',out_message); drawnow
                check_out = 1;
            end
        case 13                                                             % GLDASv2.1/NOAH025
            model_name = 'GLDASv2.1/NOAH025';
            if exclude_calc(1) == 0 && exclude_calc(2) == 0                 % nothing is excluded
                ref_mass_conserv = 1.1569436728e+17;
            elseif exclude_calc(2) == 0 && exclude_calc(1) == 1             % only Greenland excluded
                ref_mass_conserv = 6.8439669881e+16;
            elseif exclude_calc(2) == 1 && exclude_calc(1) == 1             % Greenland and Antarctica excluded
                ref_mass_conserv = 6.8439669881e+16;
            elseif exclude_calc(2) == 1 && exclude_calc(1) == 0             % only Antarctica excluded
                ref_mass_conserv = 1.1569436728e+17;
            end
            if step_calc == 6
                nazov = fullfile(ghc_path,sprintf('GLDAS2_NOAH025_M_%4d%02d.mat',time(i,1),time(i,2)));
            else
                nazov = fullfile(ghc_path,sprintf('GLDAS2_NOAH025SUBP_3H_%4d%02d%02d_%02d.mat',time(i,1),time(i,2),time(i,3),time(i,4)));
            end
            try
                new = importdata(nazov);
                switch model_layer
                    case 1
                        new.celkovo = new.soilm1 + new.soilm2 + new.soilm3 + new.soilm4 + new.swe;
                        out_layer = 'total';
                    case 2
                        new.celkovo = new.soilm1;out_layer = 'soilm1';
                    case 3
                        new.celkovo = new.soilm2;out_layer = 'soilm2';
                    case 4
                        new.celkovo = new.soilm3;out_layer = 'soilm3';
                    case 5
                        new.celkovo = new.soilm4;out_layer = 'soilm4';
                    case 6
                        new.celkovo = new.swe;out_layer = 'swe';
                end
            catch exeption
                out_message = sprintf('Hydro: file %s not found',nazov);
                set(findobj('Tag','text_status'),'String',out_message); drawnow
                check_out = 1;
            end
        case 14                                                             % ERA5
            model_name = 'ERA5';
            % %% Here, "constant" mean total water-storage is set. This is then subtracted from value given by i-th file (hour/month)
            % %% For new model, this must be computed. The easiest way is to run the code for all combinations and insert the computed value Here
            % %% You need to run the code for all "exclusion" combination. This is because the mean total water storage will be different when excluding Greenland, Antarctica, both, nothing...
            if exclude_calc(1) == 0 && exclude_calc(2) == 0                 % nothing is excluded
                ref_mass_conserv = 0; % %% RUN AND CHANGE after computing mean
            elseif exclude_calc(2) == 0 && exclude_calc(1) == 1             % only Greenland excluded
                ref_mass_conserv = 0; % %% RUN AND CHANGE after computing mean
            elseif exclude_calc(2) == 1 && exclude_calc(1) == 1             % Greenland and Antarctica excluded
                ref_mass_conserv = 0; % %% RUN AND CHANGE after computing mean
            elseif exclude_calc(2) == 1 && exclude_calc(1) == 0             % only Antarctica excluded
                ref_mass_conserv = 0; % %% RUN AND CHANGE after computing mean
            end
            if step_calc == 6
                % %% SET the name according to mGlobe_convert_ERA5
                nazov = fullfile(ghc_path,sprintf('ERA5_M_%4d%02d.mat',time(i,1),time(i,2))); 
            else
                % %% SET the name according to mGlobe_convert_ERA5
                nazov = fullfile(ghc_path,sprintf('ERA5_6H_%4d%02d%02d_%02d.mat',time(i,1),time(i,2),time(i,3),time(i,4)));
            end
            try
                new = importdata(nazov);
                % %% This looks OK, see layer specs https://confluence.ecmwf.int/display/CKB/ERA5-Land%3A+data+documentation
                switch model_layer
                    case 1
                        new.celkovo = (new.swvl1*0.07 + new.swvl2*0.21 + new.swvl3*0.72 + new.swvl4*1.89)*1000 + new.sd*1000; % transform from m3/m3 and m of water to kg/m^2 (mm)
                        out_layer = 'total';
                    case 2
                        new.celkovo = (new.swvl1*0.07)*1000;out_layer = 'swvl1';
                    case 3
                        new.celkovo = (new.swvl2*0.21)*1000;out_layer = 'swvl2';
                    case 4
                        new.celkovo = (new.swvl3*0.72)*1000;out_layer = 'swvl3';
                    case 5
                        new.celkovo = (new.swvl4*1.89)*1000;out_layer = 'swvl4';
                    case 6
                        new.celkovo = new.sd*1000;out_layer = 'sd';
                end
                % %% THis looks also OK, see https://confluence.ecmwf.int/display/CKB/ERA5%3A+What+is+the+spatial+reference#ERA5:Whatisthespatialreference-Gridresolution
                new.lon(new.lon>=180) = new.lon(new.lon>=180) - 360;        % transform coordinates/longitude to (-180,180) system  
                ri = find(abs(diff(new.lon(1,:)))==max(abs(diff(new.lon(1,:)))));
                new.lon = horzcat(new.lon(:,ri+1:end),new.lon(:,1:ri));     % Connect matrices to remove discontinuity
            	new.lat = horzcat(new.lat(:,ri+1:end),new.lat(:,1:ri));
                new.celkovo = horzcat(new.celkovo(:,ri+1:end),new.celkovo(:,1:ri));clear ri;
            catch exeption
                out_message = sprintf('Hydro: file %s not found',nazov);
                set(findobj('Tag','text_status'),'String',out_message); drawnow
                check_out = 1;
            end
    end
    if check_out == 0
        % %% I would recommend to extract/fetch the data with constant 0.25 or 0.50 deg resolution (https://confluence.ecmwf.int/display/CKB/ERA5%3A+What+is+the+spatial+reference#ERA5:Whatisthespatialreference-Gridresolution)
        delta_ghm = [abs(new.lon(1,1)-new.lon(1,2)) abs(new.lat(1,1)-new.lat(2,1))];
        %% Determine mass conservation deficit
        if ~exist('land_areas','var')
            delta_lat = diff(vertcat(new.lat(1,:)-delta_ghm(2),new.lat));
            delta_lon = diff(horzcat(new.lon(:,1)-delta_ghm(1),new.lon)');delta_lon = delta_lon';
            if strcmp(ver(end),')')
                land_areas = areaquad(new.lat-delta_lat/2,new.lon-delta_lon/2,new.lat+delta_lat/2,new.lon+delta_lon/2,referenceEllipsoid('wgs84','m')); % area of the loaded grid (oceans + continents)
            else
                fiG = mGlobe_elip2sphere(new.lon*pi/180,new.lat*pi/180);        % transform given (ellipsoidal) coord. to spherical
                delta_ghm_Sphere = abs(fiG+(delta_lat/2)*pi/180 - mGlobe_elip2sphere(new.lon*pi/180,(new.lat-delta_lat/2)*pi/180)); % calc. new grid resolution
                land_areas = 2*r^2*(delta_ghm(1)*pi/180).*cos(fiG).*sin(delta_ghm_Sphere./2);
                clear fiG delta_ghm_Sphere % remove used variables
            end
            clear delta_lat delta_lon % delete used variables
            [~,land_id] = mGlobe_interpolation(new.lon,new.lat,new.celkovo,new.lon,new.lat,1); % identify oceans and continents
            land_id(isnan(land_id)) = 0;
            land_id(land_id <=0) = 0;                                       % set ocean id to zero (will be used as multiplicator)
            land_id(land_id > 0) = 1;
            land_areas = land_areas.*land_id;                               % compute land surface area only
            clear land_id;
        end
        %% EXCLUDE
        if exclude_calc(1) == 1                                             % REMOVE GREENLAND
            new.celkovo((new.lon >-60 & new.lon < -30) & (new.lat >60 & new.lat <85)) = 0;
            new.celkovo((new.lon >=-30 & new.lon < -10) & (new.lat >68 & new.lat <85)) = 0;
            new.celkovo((new.lon >-73 & new.lon < -60) & (new.lat >75 & new.lat <79.5)) = 0;
            new.celkovo((new.lon >-67 & new.lon < -63.2) & (new.lat >79.5 & new.lat <81)) = 0;
            new.celkovo((new.lon >-63.5 & new.lon < -60) & (new.lat >79.5 & new.lat <82)) = 0;
        end

        if exclude_calc(2) == 1                                             % REMOVE ANTARCTICA   
            new.celkovo(new.lat <-58) = 0;
        end
        
        if (model_calc >= 8 && model_calc <= 9) && ~exist('ref_mass_conserv','var')
            ref_mass_conserv = sum(sum(new.celkovo.*land_areas));
        end
        GHM_conserv(i,1) = sum(sum(new.celkovo.*land_areas))-ref_mass_conserv; % vector with mass excess/deficit (in kg)
		% The inclusion polygon is not taken into consideration of total mass computation!
        if ~isempty(inclusion) && ~exist('id_in','var')
            id_in = inpolygon(new.lon,new.lat,inclusion(:,1),inclusion(:,2)); % find grid cells within given polygon
        end
        if ~isempty(inclusion)                                              % Include only grid cells within the given polygon
            new.celkovo(~id_in) = 0;
        end
        %% FIRST ZONE
        z = 1;
        if ~exist('dgE1','var')                                             % initialization for the first zone
            boundries1 = [-180+delta_zone1/2 -90+delta_zone1/2;180-delta_zone1/2 90-delta_zone1/2];
            [dgE1,dgP1,la_out1,fi_out1,la_grid1,fi_grid1] = mGlobe_Global(Input(2),Input(1),boundries1,delta_zone1,dgE_table,r,treshold_zone1);
            [~,DataID1] = mGlobe_interpolation(new.lon,new.lat,new.celkovo,la_grid1,fi_grid1,1); % interpolate water mass from GHM
        end
        celkovo = mGlobe_interpolation(new.lon,new.lat,new.celkovo,la_grid1,fi_grid1,0); % interpolate water mass from GHM
        celkovo(isnan(celkovo)) = 0;                                        % set areas (e.g. Antarctica) out of GHM to zero
        dgE(i,z) = sum(sum(dgE1(DataID1==1).*celkovo(DataID1==1)))*1e9;     % multiply and add all cells
        dgP(i,z) = sum(sum(dgP1(DataID1==1).*celkovo(DataID1==1)))*1e9;
        switch mass_conserv
            case 2
            conserv_corrE(i,z) = sum(sum(dgE1(DataID1==-1).*(GHM_conserv(i,1)/ocean_surface_total)))*1e9; % Calc. effect of mass conservation deficit
            conserv_corrP(i,z) = sum(sum(dgP1(DataID1==-1).*(GHM_conserv(i,1)/ocean_surface_total)))*1e9;
            case 1
            conserv_corrE(i,:) = 0;
            conserv_corrP(i,:) = 0;
            case 3
            conserv_corrE(i,z) = sum(sum(dgE1(DataID1==-1).*celkovo(DataID1==-1)))*1e9; % Calc. effect of mass conservation deficit
            conserv_corrP(i,z) = sum(sum(dgP1(DataID1==-1).*celkovo(DataID1==-1)))*1e9;    
        end
        clear celkovo boundries1

        %% THIRD ZONE
        % This includes the Second zone that was removed in newer version
        z = 3;
        if ~exist('dgE3','var')                                             % initialization for the third zone
            boundries3 = [min(min(la_out1))-delta_zone1/2+delta_zone3/2  min(min(fi_out1))-delta_zone1/2+delta_zone3/2;...
                          max(max(la_out1))+delta_zone1/2-delta_zone3/2  max(max(fi_out1))+delta_zone1/2-delta_zone3/2];
            clear la_out1 fi_out1
            [dgE3,dgP3,la_out3,fi_out3,la_grid3,fi_grid3] = mGlobe_Global(Input(2),Input(1),boundries3,delta_zone3,dgE_table,r,treshold_zone3);
            [~,DataID3] = mGlobe_interpolation(new.lon,new.lat,new.celkovo,la_grid3,fi_grid3,1); % interpolate water mass from GHM
        end
        celkovo = mGlobe_interpolation(new.lon,new.lat,new.celkovo,la_grid3,fi_grid3,0); % interpolate water mass from GHM
        dgE(i,z) = sum(sum(dgE3(DataID3==1).*celkovo(DataID3==1)))*1e9;     % multiply and add all cells
        dgP(i,z) = sum(sum(dgP3(DataID3==1).*celkovo(DataID3==1)))*1e9;        
        switch mass_conserv
            case 2
            conserv_corrE(i,z) = sum(sum(dgE3(DataID3==-1).*(GHM_conserv(i,1)/ocean_surface_total)))*1e9; % Calc. effect of mass conservation deficit
            conserv_corrP(i,z) = sum(sum(dgP3(DataID3==-1).*(GHM_conserv(i,1)/ocean_surface_total)))*1e9;
            case 1
            conserv_corrE(i,:) = 0;
            conserv_corrP(i,:) = 0;
            case 3
            conserv_corrE(i,z) = sum(sum(dgE3(DataID3==-1).*celkovo(DataID3==-1)))*1e9; % Calc. effect of mass conservation deficit
            conserv_corrP(i,z) = sum(sum(dgP3(DataID3==-1).*celkovo(DataID3==-1)))*1e9;    
        end
        clear celkovo boundries3

        %% FOURTH ZONE
        z = 4;
        if ~exist('dgE4','var')                                             % initialization for the fourth zone
            boundries4 = [min(min(la_out3))-delta_zone3/2+delta_zone4/2  min(min(fi_out3))-delta_zone3/2+delta_zone4/2;...
                          max(max(la_out3))+delta_zone3/2-delta_zone4/2  max(max(fi_out3))+delta_zone3/2-delta_zone4/2];
            clear la_out3 fi_out3
            [dgE4,dgP4,la_out4,fi_out4,la_grid4,fi_grid4] = mGlobe_Local(Input(2),Input(1),hd,DEM,boundries4,delta_zone4,dgE_table,r,treshold_zone4in,treshold_zone4out);
            if nargin >= 16 && ischar(varargin{1}) % interpolate water mass from GHM using either shapefile or ocean/land grid for Land cell identification
                [~,DataID4] = mGlobe_interpolation(new.lon,new.lat,new.celkovo,la_grid4,fi_grid4,varargin{1});
            else
                [~,DataID4] = mGlobe_interpolation(new.lon,new.lat,new.celkovo,la_grid4,fi_grid4,1);
            end
        end
        celkovo = mGlobe_interpolation(new.lon,new.lat,new.celkovo,la_grid4,fi_grid4,0); % interpolate water mass from GHM
        dgE(i,z) = sum(sum(dgE4(DataID4==1).*celkovo(DataID4==1)))*1e9;     % multiply and add all cells
        dgP(i,z) = sum(sum(dgP4(DataID4==1).*celkovo(DataID4==1)))*1e9;
        switch mass_conserv
            case 2
            conserv_corrE(i,z) = sum(sum(dgE4(DataID4==-1).*(GHM_conserv(i,1)/ocean_surface_total)))*1e9; % Calc. effect of mass conservation deficit
            conserv_corrP(i,z) = sum(sum(dgP4(DataID4==-1).*(GHM_conserv(i,1)/ocean_surface_total)))*1e9;
            case 1
            conserv_corrE(i,:) = 0;
            conserv_corrP(i,:) = 0;
            case 3
            conserv_corrE(i,z) = sum(sum(dgE4(DataID4==-1).*celkovo(DataID4==-1)))*1e9; % Calc. effect of mass conservation deficit
            conserv_corrP(i,z) = sum(sum(dgP4(DataID4==-1).*celkovo(DataID4==-1)))*1e9;    
        end
        clear celkovo DataID
        % interpolate total water storage for the point of computation
        interp_output(i,1) = interp2(new.lon,new.lat,new.celkovo,Input(2),Input(1)); 
        
        %% FIFTH ZONE
        z = 5;
        if ghc_treshold < 0.1                                               % initialization for the fifth zone
            if ~exist('dgE5','var') 
                boundries5 = [min(min(la_out4))-delta_zone4/2+delta_zone5/2  min(min(fi_out4))-delta_zone4/2+delta_zone5/2;...
                              max(max(la_out4))+delta_zone4/2-delta_zone5/2  max(max(fi_out4))+delta_zone4/2-delta_zone5/2];
                clear la_out4 la_out4 fi_out4 fi_out4
                [dgE5,dgP5,~,~,la_grid5,fi_grid5] = mGlobe_Local(Input(2),Input(1),hd,DEM,boundries5,delta_zone5,dgE_table,r,treshold_zone5in,treshold_zone5out);
                if nargin >= 16 && ischar(varargin{1}) % interpolate water mass from GHM using either shapefile or ocean/land grid for Land cell identification
                    [~,DataID5] = mGlobe_interpolation(new.lon,new.lat,new.celkovo,la_grid5,fi_grid5,varargin{1}); 
                else
                    [~,DataID5] = mGlobe_interpolation(new.lon,new.lat,new.celkovo,la_grid5,fi_grid5,1); 
                end
            end
            celkovo = mGlobe_interpolation(new.lon,new.lat,new.celkovo,la_grid5,fi_grid5,0); % interpolate water mass from GHM
            dgE(i,z) = sum(sum(dgE5(DataID5==1).*celkovo(DataID5==1)))*1e9;              % multiply and add all cells
            dgP(i,z) = sum(sum(dgP5(DataID5==1).*celkovo(DataID5==1)))*1e9;
        switch mass_conserv
            case 2
            conserv_corrE(i,z) = sum(sum(dgE5(DataID5==-1).*(GHM_conserv(i,1)/ocean_surface_total)))*1e9; % Calc. effect of mass conservation deficit
            conserv_corrP(i,z) = sum(sum(dgP5(DataID5==-1).*(GHM_conserv(i,1)/ocean_surface_total)))*1e9;
            case 1
            conserv_corrE(i,:) = 0;
            conserv_corrP(i,:) = 0;
            case 3
            conserv_corrE(i,z) = sum(sum(dgE5(DataID5==-1).*celkovo(DataID5==-1)))*1e9; % Calc. effect of mass conservation deficit
            conserv_corrP(i,z) = sum(sum(dgP5(DataID5==-1).*celkovo(DataID5==-1)))*1e9;    
        end
            clear celkovo
        else
            dgE(i,z) = 0;
            dgP(i,z) = 0;
            conserv_corrE(i,z) = 0;
            conserv_corrP(i,z) = 0;
        end   
        if size(time,1) > 2
            out_message = sprintf('Hydro: Calculating hydrological effect ... (%3.0f%%)',100*((i-1)/size(time,1))); % create status message
        else
            out_message = sprintf('Hydro: Calculating hydrological effect ...'); % create status message
        end
        set(findobj('Tag','text_status'),'String',out_message); drawnow     % write message to GUI
        clear new
        else
            row_id_nan(i) = 1;
            set(findobj('Tag','text_status'),'String',[nazov,' not found => left out!']); % warn user that this GHM was not loaded
            fprintf('%s not found => left out!\n',nazov);
    end
end
if step_calc == 6 && model_calc ~=9                                         % set accurate time (midpoint) for monthly data
    for ti = 1:size(time,1)
        time(ti,7) = (time(ti,7)+datenum(time(ti,1),time(ti,2)+1,1)-1)/2;   % rewrite existing time to accurate value
    end
    time(:,1:6) = datevec(time(:,7));
end
if model_calc == 7
    time(:,5) = 30;
    time(:,7) = datenum(time(:,1:6));
end
if sum(sum(abs(dgE(~isnan(dgE))))) > 0
    %% Clear used variables and prepare results
    clear la_grid1 fi_grid1 la_grid2 fi_grid2 la_grid3 fi_grid3 la_grid5 fi_grud5 la_grid6 fi_grid6 DataID1 DataID2 DataID3 DataID4 DataID5
    if mass_conserv == 2
        sign_mult = -1;
    else
        sign_mult = 1;
    end
    conserv_corr(:,1) = -sign_mult*sum(conserv_corrE + conserv_corrP,2);    % sum effects (xxxE loading, xxxP attraction)
    conserv_corr(:,2) = -sign_mult*sum(conserv_corrE,2);
    conserv_corr(:,3) = -sign_mult*sum(conserv_corrP,2);
    ocean_contrib = conserv_corr(:,1)./GHM_conserv*ocean_surface_total;     % compute the contribution of ocean per 1 mm
    if length(time(:,1)) > 1                                                % constant in time but for "Other" models, first value is 0
        ocean_contrib = -ocean_contrib(2);   
    else
        ocean_contrib = -ocean_contrib(1);                                  % opposite sign because the gravity effect counteracts the continental effects
    end
    total(:,1:5) = dgE(:,1:5) + dgP(:,1:5);
    total_write = -sum(total,2);
    dgE_write = -sum(dgE,2);
    dgP_write = -sum(dgP,2);
    if subtract_average == 1                                                % subtract average value if required
        dgE_write = dgE_write - mean(dgE_write(~isnan(dgE_write)));
        dgP_write = dgP_write - mean(dgP_write(~isnan(dgP_write)));
        total_write = total_write - mean(total_write(~isnan(total_write)));
        interp_output = interp_output - mean(interp_output(~isnan(interp_output)));
        for sa = 1:3
            conserv_corr(:,sa) = conserv_corr(:,sa) - mean(conserv_corr(~isnan(conserv_corr(:,sa)),sa));
        end
    end
    total_write(row_id_nan == 1) = NaN;                                     % set omitted time epochs (GHM not loaded) to NaN
    dgE_write(row_id_nan == 1) = NaN;
    dgP_write(row_id_nan == 1) = NaN;
    conserv_corr(row_id_nan == 1,:) = NaN;
    interp_output(row_id_nan == 1,:) = NaN;

    %% Output xls
    duration = toc;                                                         % computation duration
    set(findobj('Tag','text_status'),'String','GHE: Writing output file...');drawnow
    clear la_out fi_out DEM5 geoid nazov
    if output_file_type(1) == 1 && strcmp(ver(end),')') % only for Matlab
        try
        table = {'Results of the GHE calculation'};
        table(2,1:4) = {'Coord.:','phi','lambda','height'};
        table(3,1) = {'Station'};
        table(3,2) = num2cell(Input(1)); table(3,3) = num2cell(Input(2)); 
        table(3,4) = num2cell(Input(3));
        table(4,1) = {'Calculation settings:'}; 
        if isempty(DEM_file)
            table(5,1) = {'no DEM'};
        else
            table(5,1) = {'DEM used:'};table(5,3) = {DEM_file};
        end
        table(6,1) = {'Excluded area:'};
        if exclude_calc(1) == 0 && exclude_calc(2) == 0
            table(6,3) = {'nothing excluded'};
        elseif exclude_calc(2) == 1 && exclude_calc(1) == 0
            table(6,3) = {'Antarctica'};
        elseif exclude_calc(2) == 0 && exclude_calc(1) == 1
            table(6,3) = {'Greenland'};
        elseif exclude_calc(2) == 1 && exclude_calc(1) == 1
            table(6,3) = {'Greenland and Antarctica'};
        end
        table(7,1) = {'Inclusion polygon:'};
        if ~isempty(inclusion)
            table(7,3) = {INCLUDE_file};
            table(6,3) = {'All excluded except the grid cells within the given inclusion polygon'};
        else
            table(7,3) = {'No polygon loaded'};
        end
        table(8,1) = {'Local land/ocean SHP file:'};
        if nargin >= 16 && ischar(varargin{1})
            table(8,3) = {varargin{1}};
        else
            table(8,3) = {'No file loaded (only mGlobe_DATA_OceanGrid.mat used)'};
        end
        table(9,1) = {'Model:'};table(9,3) = {model_name};table(9,4) = {'Layer:'};table(9,5) = {out_layer};
        table(10,1) = {'Model res.:'};
        table(10,3) = {sprintf('%3.2fx%3.2f deg',delta_ghm(1),delta_ghm(2))};
        if step_calc == 6
            table(10,4) = {'Monthly'};
        else
            table(10,4) = {'Daily/hourly'};
        end
        table(11,1) = {'Mass conserv.:'};
        switch mass_conserv
            case 2
            table(11,3) = {sprintf('on (layer on ocean, gravity response to 1 mm: %5.3f nm/s^2))',ocean_contrib)};
            case 1
            table(11,3) = {'off'};
            case 3
            table(11,3) = {'off (coupled continental and ocean model)'};   
        end
        table(12,1) = {'GHE/LHE threshold (deg):'};
        table(12,3) = num2cell(ghc_treshold);
        table(13,1) = {'Calc. date:'};
        table(13,2:7) = num2cell(clock);
        table(14,1) = {'Calc. duration (min):'};
        table(14,3) = num2cell(duration/60);
        table(15,1) = {'Flagged value: empty cell'};
        table(16,1) = {'Results (in nm/s^2)'};
        table(17,1:13) = {'time_matlab','year','month','day','hour','minute',...
                            'second','total_effect','continet_loading',...
                            'continent_newton','ocean_loading','ocean_newton',...
                            'local_TWS(mm)'};
        if size(time(:,7),1) >=65536                                        % write xls only if the total number of rows < max allowed Excel length
            output_file_type(2) = 1;                                        % in such case, the results will be written only to txt/tsoft format
            output_file_xls = output_file(1:end-4);
            table(18,1) = {'Data to long for excel file-for results,see created txt file'};
            xlswrite([output_file_xls 'xls'],table);
        else
            table(18:18+size(total,1)-1,1) = num2cell(time(:,7));
            table(18:18+size(total,1)-1,2:7) = num2cell(datevec(time(:,7)));
            table(18:18+size(total,1)-1,8) = num2cell(total_write+conserv_corr(:,1));
            table(18:18+size(total,1)-1,9) = num2cell(dgE_write);
            table(18:18+size(total,1)-1,10) = num2cell(dgP_write);
            table(18:18+size(total,1)-1,11) = num2cell(conserv_corr(:,2));
            table(18:18+size(total,1)-1,12) = num2cell(conserv_corr(:,3));
            table(18:18+size(total,1)-1,13) = num2cell(interp_output);
            output_file_xls = output_file(1:end-4);
            xlswrite([output_file_xls '.xls'],table);
        end
        catch
            set(findobj('Tag','text_status'),'String','GHE: Could not write xls file (see *.txt for results)...');drawnow
            fprintf('Ocean: Could not write xls file (see *.txt for results)...\n');
            output_file_type(2) = 1;
        end
    end
    %% Output txt
    if output_file_type(2) == 1  
        try
        output_file_txt = output_file(1:end-4);
        fid = fopen([output_file_txt '.txt'],'w');
        fprintf(fid,'%% Results of the GHE calculation\n');
        fprintf(fid,'%% Station latitude (deg):   \t%10.8f\n',Input(1));
        fprintf(fid,'%% Station longitude (deg):   \t%10.8f\n',Input(2));
        fprintf(fid,'%% Station height (m):       \t%8.3f\n',Input(3));
        fprintf(fid,'%% Calculation settings:\n'); 
        fprintf(fid,'%% DEM:\t%s\n',DEM_file);
        fprintf(fid,'%% Excluded area:\t');
        if (exclude_calc(1) == 0 && exclude_calc(2) == 0) && isempty(inclusion)
            fprintf(fid,'nothing excluded\n');
        elseif (exclude_calc(2) == 1 && exclude_calc(1) == 0) && isempty(inclusion)
            fprintf(fid,'Antarctica\n');
        elseif (exclude_calc(2) == 0 && exclude_calc(1) == 1) && isempty(inclusion)
            fprintf(fid,'Greenland\n');
        elseif (exclude_calc(2) == 1 && exclude_calc(1) == 1) && isempty(inclusion)
            fprintf(fid,'Greenland and Antarctica\n');
        else
            fprintf(fid,'All excluded except the grid cells within the given inclusion polygon\n');
        end
        fprintf(fid,'%% Inclusion polygon:\t');
        if ~isempty(inclusion)
            fprintf(fid,' %s\n',INCLUDE_file);
        else
            fprintf(fid,' No inclusion polygon loaded\n');
        end
        fprintf(fid,'%% Local land/ocean SHP file:\t');
        if nargin >= 16 && ischar(varargin{1})
            fprintf(fid,' %s\n',varargin{1});
        else
            fprintf(fid,' No file loaded (only mGlobe_DATA_OceanGrid.mat used)\n');
        end
        fprintf(fid,'%% Model:\t %s, layer:\t %s\n',model_name,out_layer);
        fprintf(fid,'%% Model resolution:\t%3.2fx%3.2f deg, ',delta_ghm(1),delta_ghm(2));
        if step_calc == 6
            fprintf(fid,'Monthly\n');
        else 
            fprintf(fid,'Daily/hourly\n');
        end
        fprintf(fid,'%% Mass conservation enforced:\t');
        switch mass_conserv
            case 2
            fprintf(fid,'on (layer on ocean, gravity response to 1 mm: %5.3f nm/s^2)\n',ocean_contrib);
            case 1
            fprintf(fid,'off\n');
            case 3
            fprintf(fid,'off (coupled continental and ocean model)\n');   
        end
        fprintf(fid,'%% GHE/LHE threshold (deg):\t%5.2f\n',ghc_treshold);
        ctime = clock;
        fprintf(fid,'%% Calc. date:\t%04d/%02d/%02d %02d:%02d:%02d\n',ctime(1),ctime(2),ctime(3),ctime(4),ctime(5),round(ctime(6)));
        fprintf(fid,'%% Calc. duration (min):\t%5.2f\n',duration/60);
        fprintf(fid,'%% Flagged values: NaN\n');
        fprintf(fid,'%% Result units: nm/s^2\n');
        fprintf(fid,'%% time_matlab   \tDate       \tTime	 total_eff	 cont_load	 cont_newton	 ocean_load	 ocean_newton  local_TWS(mm)\n');
        [year,month,day,hour,minute,second] = datevec(time(:,7));
        for i = 1:length(time(:,7))
            fprintf(fid,'%12.6f   \t%4d%02d%02d   \t%02d%02d%02d\t\t%7.2f\t\t%7.2f\t\t%7.2f\t\t%7.2f\t\t%7.2f\t\t%7.2f\n',...
                time(i,7),year(i),month(i),day(i),hour(i),minute(i),second(i),...
                total_write(i)+conserv_corr(i,1),dgE_write(i),...
                dgP_write(i),conserv_corr(i,2),conserv_corr(i,3),interp_output(i,1));
        end
        fclose('all');
        catch
            set(findobj('Tag','text_status'),'String','GHE: Could not write txt file...');drawnow
            fprintf('Ocean: Could not write txt file...\n');
        end
    end
    %% Output tsf
    if output_file_type(3) == 1  
        try
        output_file_tsf = output_file(1:end-4);
        fid = fopen([output_file_tsf '.tsf'],'w');
        fprintf(fid,'[TSF-file] v01.0\n\n');
        fprintf(fid,'[UNDETVAL] 1234567.89\n\n');
        total_write(row_id_nan == 1) = 1234567.89;
        dgE_write(row_id_nan == 1) = 1234567.89;
        dgP_write(row_id_nan == 1) = 1234567.89;
        interp_output(row_id_nan == 1) = 1234567.89;
        conserv_corr(row_id_nan == 1,:) = 1234567.89;
        sum_for_tsf = total_write+conserv_corr(:,1);
        sum_for_tsf(row_id_nan == 1) = 1234567.89;
        fprintf(fid,'[TIMEFORMAT] DATETIME\n\n');
        fprintf(fid,'[INCREMENT] %8.3f\n\n',time_resol_in_days*24*60*60);
        fprintf(fid,'[CHANNELS]\n');
        fprintf(fid,' Location:%s:total_effect\n',model_name); 
        fprintf(fid,' Location:%s:continental_loading_effect\n',model_name); 
        fprintf(fid,' Location:%s:continental_newtonian_effect\n',model_name); 
        fprintf(fid,' Location:%s:ocean_loading_effect\n',model_name); 
        fprintf(fid,' Location:%s:ocean_newtonian_effect\n',model_name); 
        fprintf(fid,' Location:%s:interpolated local water storage\n\n',model_name); 
        fprintf(fid,'[UNITS]\n nm/s^2\n nm/s^2\n nm/s^2\n nm/s^2\n nm/s^2\n mm\n\n');
        fprintf(fid,'[COMMENT]\n');
		fprintf(fid,' Station latitude (deg):   \t%10.8f\n',Input(1));
        fprintf(fid,' Station longitude (deg):   \t%10.8f\n',Input(2));
        fprintf(fid,' Station height (m):       \t%8.3f\n',Input(3));
        fprintf(fid,' Calculation settings:\n'); 
        fprintf(fid,' DEM:\t%s\n',DEM_file);
        fprintf(fid,' Excluded area:\t');
        if (exclude_calc(1) == 0 && exclude_calc(2) == 0) && isempty(inclusion)
            fprintf(fid,'nothing excluded\n');
        elseif (exclude_calc(2) == 1 && exclude_calc(1) == 0) && isempty(inclusion)
            fprintf(fid,'Antarctica\n');
        elseif (exclude_calc(2) == 0 && exclude_calc(1) == 1) && isempty(inclusion)
            fprintf(fid,'Greenland\n');
        elseif (exclude_calc(2) == 1 && exclude_calc(1) == 1) && isempty(inclusion)
            fprintf(fid,'Greenland and Antarctica\n');
        else
            fprintf(fid,'All excluded except the grid cells within the given inclusion polygon\n');
        end
        fprintf(fid,' Inclusion polygon:\t');
        if ~isempty(inclusion)
            fprintf(fid,' %s\n',INCLUDE_file);
        else
            fprintf(fid,' No inclusion polygon loaded\n');
        end
        fprintf(fid,' Local land/ocean SHP file:\t');
        if nargin >= 16 && ischar(varargin{1})
            fprintf(fid,' %s\n',varargin{1});
        else
            fprintf(fid,' No file loaded (only mGlobe_DATA_OceanGrid.mat used)\n');
        end
        fprintf(fid,' Model:\t %s, layer:\t %s\n',model_name,out_layer);
        fprintf(fid,' Model resolution:\t%3.2fx%3.2f deg, ',delta_ghm(1),delta_ghm(2));
        if step_calc == 6
            fprintf(fid,'Monthly\n');
        else 
            fprintf(fid,'Daily/hourly\n');
        end
        fprintf(fid,' Mass conservation enforced:\t');
        switch mass_conserv
            case 2
            fprintf(fid,'on (layer on ocean, gravity response to 1 mm: %5.3f nm/s^2)\n',ocean_contrib);
            case 1
            fprintf(fid,'off\n');
            case 3
            fprintf(fid,'off (coupled continental and ocean model)\n');   
        end
        fprintf(fid,' GHE/LHE threshold (deg):\t%5.2f\n',ghc_treshold);
        ctime = clock;
        fprintf(fid,' Calc. date:\t%04d/%02d/%02d %02d:%02d:%02d\n\n',ctime(1),ctime(2),ctime(3),ctime(4),ctime(5),round(ctime(6)));
        fprintf(fid,'[COUNTINFO] %8.0f\n\n',length(time(:,7)));
        fprintf(fid,'[DATA]\n');
        [year,month,day,hour,minute,second] = datevec(time(:,7));clear i
        for i = 1:length(time(:,7))
            fprintf(fid,'%04d %02d %02d  %02d %02d %02d   %17.3f %17.3f %17.3f %17.3f %17.3f %17.3f\n',...
                year(i),month(i),day(i),hour(i),minute(i),second(i),...
                sum_for_tsf(i),dgE_write(i),...
                dgP_write(i),conserv_corr(i,2),conserv_corr(i,3),interp_output(i,1));
        end
        fclose('all');
        catch
            set(findobj('Tag','text_status'),'String','GHE: Could not write tsf file...');drawnow
            fprintf('Ocean: Could not write tsf file (see *.txt for results)...\n');
        end
    end
    % %% For intial model run only! May delete after computing mean ref_mass_conserv (or keep for other model, just set model_calc accordingly)
    % %% It will save the result in. Read this file and compute mean value over time. Use this value to set ref_mass_conserv in the respective part of the code
    % %% Use either monthly or daily (or 48 hour step). It is not necessary to run with highes time resolution!
    if ref_mass_conserv == 0 && model_calc == 14
        csvwrite(sprintf('GHM_conserv_model_calc_%02d_Greenland_%1d_Antarctica_%1d.csv',model_calc,exclude_calc(1),exclude_calc(2)),GHM_conserv)
    end
    set(findobj('Tag','text_status'),'String','Hydro: GHE calculated...');drawnow  % write final message
else
    set(findobj('Tag','text_status'),'String','Hydro: No results obtained...(no valid model input)');drawnow % warn user
    fprintf('Hydro: No results obtained...(no valid model input)\n');
    pause(4);
end

